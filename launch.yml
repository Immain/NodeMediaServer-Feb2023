#     ____                  __         ____        __           _____            __
#    / __ \____ _____  ____/ /___ _   / __ \____ _/ /_____ _   / ___/__  _______/ /____  ____ ___  _____
#   / /_/ / __ `/ __ \/ __  / __ `/  / / / / __ `/ __/ __ `/   \__ \/ / / / ___/ __/ _ \/ __ `__ \/ ___/
#  / ____/ /_/ / / / / /_/ / /_/ /  / /_/ / /_/ / /_/ /_/ /   ___/ / /_/ (__  ) /_/  __/ / / / / (__  )
# /_/    \__,_/_/ /_/\__,_/\__,_/  /_____/\__,_/\__/\__,_/   /____/\__, /____/\__/\___/_/ /_/ /_/____/
#                                                                 /____/
# Written By: Immain
# Date Created: 2/15/2023
# Version: 1.0.0
# Title: Node Media Server
# Description: Linode Cloud Based Media Server to push stream content or live video feeds

---
- name: Create Linode Instance
  hosts: localhost
  vars_files:
    - ./group_vars/vars.yml
  tasks:
  - name: Create a Linode instance
    linode_v4:
      access_token: "{{ access_token }}"
      authorized_keys: "{{ ssh_pub_key_file }}"
      label: test-linode
      type: g6-standard-2
      private_ip: true
      region: us-west
      image: linode/Debian11
      root_pass: "{{ password }}"
      state: present
    register: test_linode

  - name: Get Linode Info
    debug:
      msg: "ID is {{ test_linode.instance.id }} IP is {{ test_linode.instance.ipv4 }}"
      
  - name: Add Instance ID To vars.yml
    lineinfile:
      dest: /home/ubuntu/development/group_vars/vars.yml
      line: "instance_id: {{ test_linode.instance.id }}"
      state: present
      create: yes

  - name: Add New Linode to Host Group
    add_host:
      hostname: "{{ test_linode.instance.ipv4[0] }}"
      groups: Launched
      ansible_user: root

  - name: Wait for SSH to Come Up (this may take awhile, completion time varies)
    wait_for:
      host: "{{ test_linode.instance.ipv4[0] }}"
      port: 22
      search_regex: OpenSSH
      timeout: 180

- hosts: Launched
  remote_user: root
  vars_files:
    - ./group_vars/vars-remote.yml
    - ./group_vars/vars.yml
  tasks:
  - name: Upgrade all apt packages
    apt: upgrade=dist force_apt_get=yes
  
  - name: Install required system packages
    apt:
      pkg:
      - ffmpeg
      - youtube-dl
      - nodejs
      - npm
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - python3-pip
      - virtualenv
      - python3-setuptools
      state: latest
      update_cache: true
  
  - name: Create Directory for Node Media Server
    file:
      path: /home/server/nodemediaserver
      state: directory
  
  - name: Install Node Media Server
    shell: npm install node-media-server
    args:
      chdir: /home/server/nodemediaserver

  - name: Create Configuration file
    copy:
      dest: "/home/server/nodemediaserver/app.js"
      content: |
        const NodeMediaServer = require('node-media-server');
        
        const config = {
          rtmp: {
            port: 1945,
            chunk_size: 60000,
            gop_cache: true,
            ping: 30,
            ping_timeout: 60
          },
          http: {
            port: 8000,
            mediaroot: '/home/server/media',
            allow_origin: '*'
          },
          trans: {
            ffmpeg: '/usr/bin/ffmpeg',
            tasks: [
              {
                app: 'live',
                hls: true,
                hlsFlags: '[hls_time=2:hls_list_size=3:hls_flags=delete_segments]',
                dash: true,
                dashFlags: '[f=dash:window_size=3:extra_window_size=5]'
              }
            ]
          }
        };
        
        var nms = new NodeMediaServer(config)
        nms.run();
        
  - name: Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: add docker repository to apt
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu bionic stable
      state: present

  - name: install docker
    apt:
      name: "{{item}}"
      state: latest
      update_cache: yes
    loop:
      - docker-ce
      - docker-ce-cli
      - containerd.io

  - name: Start and Enable Docker
    service:
      name: docker
      state: started
      enabled: yes

  - name: Install Docker Module for Python
    pip:
      name: docker

  - name: Pull Portainer Agent Image from Docker
    docker_image:
      name: portainer/agent
      source: pull

  - name: Create Portainer Agent
    docker_container:
      name: portaineragent
      image: portainer/agent
      state: started
      recreate: yes
      restart_policy: always
      published_ports:
        - "9001:9001"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - /var/lib/docker/volumes:/var/lib/docker/volumes  

  - name: Open Portainer port
    ufw:
      state: enabled
      rule: allow
      port: "9001"
      proto: tcp

  - name: Add Docker-Compose
    pip:
      name: docker-compose

  - name: Create File Directory for Compose
    file:
      path: ~/ansible/compose_files/{{ item }}
      state: directory
    with_items:
      - proxy-manager

  - name: Creating Proxy Manager Compose Stack
    copy:
      dest: "~/ansible/compose_files/proxy-manager/compose.yml"
      content: |
        version: "3"
        services:
          app:
            image: 'jc21/nginx-proxy-manager:latest'
            restart: unless-stopped
            ports:
              - '8080:8080' # Public HTTP Port
              - '443:443' # Public HTTPS Port
              - '81:81' # Admin Web Port
            volumes:
              - /data:/data
              - /letsencrypt:/etc/letsencrypt
            depends_on:
              - db
          db:
            image: mariadb:latest
            restart: unless-stopped
            environment:
              MYSQL_ROOT_PASSWORD: 'changeme'
              MYSQL_DATABASE: 'changeme'
              MYSQL_USER: 'changeme'
              MYSQL_PASSWORD: 'changeme'
            volumes:
              - /data/mysql:/var/lib/mysql
 
  - name: Deploy Nginx Proxy Manager Docker Compose stack
    docker_compose:
     project_src: ~/ansible/compose_files/proxy-manager
     files:
     - compose.yml

  - name: Open Ports
    ufw:
      state: enabled
      rule: allow
      port: "{{ item }}"
      proto: tcp
    loop:
      - '8080'
      - '81'
      - '443'
      - '1945'
      - '8000'
